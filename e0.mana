------------------------------------------------------------------------------
--
--  Integer Expression
--
------------------------------------------------------------------------------

namespace E0

  import Core

  ------------------------------------------------------------------------------
  --  E - expressions
  ------------------------------------------------------------------------------

  type E =
    EInt Int
    EAdd E E
    EMul E E

  ------------------------------------------------------------------------------
  --
  ------------------------------------------------------------------------------

  instance FromInteger E where fromInteger = EInt . fromInteger
  instance Add         E where (+)         = EAdd
  instance Multiply    E where (*)         = EMul

  ------------------------------------------------------------------------------
  --
  ------------------------------------------------------------------------------

  eval : E -> Int
  eval (EInt x  ) = x
  eval (EAdd x y) = eval x + eval y
  eval (EMul x y) = eval x * eval y

  ------------------------------------------------------------------------------
  --
  ------------------------------------------------------------------------------

  main = do
    print <| EAdd (EInt 5) (EInt 3)
    print <| eval <| EAdd (EInt 5) (EInt 3)
    print <| (5 + 3 : E)
    print <| eval <| 5 + 3
